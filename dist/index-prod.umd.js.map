{"version":3,"file":"index-prod.umd.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../src/timer.js","../src/domHelpers.js","../src/createGridComponent.js","../src/VariableSizeGrid.js","../src/createListComponent.js","../src/VariableSizeList.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","var shallowEqual = function shallowEqual(newValue, oldValue) {\n  return newValue === oldValue;\n};\n\nvar simpleIsEqual = function simpleIsEqual(newArgs, lastArgs) {\n  return newArgs.length === lastArgs.length && newArgs.every(function (newArg, index) {\n    return shallowEqual(newArg, lastArgs[index]);\n  });\n};\n\nfunction index (resultFn, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = simpleIsEqual;\n  }\n\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return result;\n}\n\nexport default index;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  debounceTime?: number,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      const { debounceTime = IS_SCROLLING_DEBOUNCE_INTERVAL } = this.props;\n\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        debounceTime\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  debounceTime?: number,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      const { debounceTime = IS_SCROLLING_DEBOUNCE_INTERVAL } = this.props;\n\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        debounceTime\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_assertThisInitialized","self","ReferenceError","simpleIsEqual","newArgs","lastArgs","every","newArg","index","newValue","oldValue","resultFn","isEqual","lastThis","lastResult","calledOnce","_len","Array","_key","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","size","cachedRTLResult","getRTLOffsetType","recalculate","outerDiv","document","createElement","outerStyle","style","width","height","overflow","direction","innerDiv","innerStyle","appendChild","body","scrollLeft","removeChild","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_this","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","clientWidth","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","debounceTime","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","scrollToItem","align","columnCount","rowCount","scrollbarSize","div","offsetWidth","getScrollbarSize","estimatedTotalHeight","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","estimatedTotalWidth","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","defaultProps","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","findNearestItem","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","nextState"],"mappings":"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"}